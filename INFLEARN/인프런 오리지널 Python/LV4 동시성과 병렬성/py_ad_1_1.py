"""
Section 1
Multithreading - Difference between Process and Thread
Kwyword - Process, Thread

"""

"""
1. Process
    - 운영체제에서 할당 받는 자원 단위(실행 중인 프로그램)
    - CPU동작 시간, 주소공간이 독립적이다. (각각의 프로그램들은 별개의 공간에서 동작)
    - Code, Data, Stack, Heap 영역이 독립적이다. -> 여러개를 띄우면 컴퓨터가 느려짐
    - 최소 1개의 메인 스레드 보유 (크롬: 프로세스, 탭: 스레드)
    - 파이프, 파일, 소켓 등을 사용해서 프로세스간 통신이 가능 (Cost 높음 == Context Switching 비용이 크다)

2. Thread
    - 프로세스 내 실행 흐름 단위
    - 프로세스 자원 사용
    - Stack만 별도, 나머지(Code, Data, Heap)는 공유
    - 메모리 공유(변수 공유)
    - 한 스레드의 결과가 다른 스레드에 영향 끼침 # 그래서 Lock을 거나?
    - 동기화 문제는 정말 주의해야 함(디버깅이 어려움)

3. 멀티 스레드
    - 한 개의 단일 어플리케이션(응용프로그램) -> 여러 스레드로 구성 후 작업 처리
    - 시스템 자원 소모 감소(효율성), 처리량 증가(Cost 감소) -> 근데 코드를 못짜면 단일스레드보다 못 함
    - 통신 부담 감소(자원을 공유하기 때문에), 디버깅 어려움, 단일 프로세스에는 효과 미약, 자원 공유 문제(교착 상태), 프로세스에 영향 줌

4. 멀티 프로세스
    - 한 개의 단일 어플리케이션(응용프로그램) -> 여러 프로세스로 구성 후 작업 처리
    - 한 개의 프로세스 문제 발생은 확산 없음(프로세스 kill 시켜도 무방)
    - 캐시 체인지, Cost 비용 매우 높음(overhead)

"""